// import makeWASocket, { DisconnectReason, useMultiFileAuthState } from '@whiskeysockets/baileys'
// import { Boom } from '@hapi/boom'
// import qrcode from 'qrcode-terminal'

// async function connectToWhatsApp () {
//     const { state, saveCreds } = await useMultiFileAuthState("auth_info_baileys"); 

//     const sock = makeWASocket({
//         // can provide additional config here
//         auth: state,
//         printQRInTerminal: false,
//     })
//     sock.ev.on('connection.update', (update) => {
//         const { connection, lastDisconnect } = update
//         if(connection === 'close' && lastDisconnect) {
//             const shouldReconnect = (lastDisconnect.error as Boom)?.output?.statusCode !== DisconnectReason.loggedOut
//             console.log('connection closed due to ', lastDisconnect.error, ', reconnecting ', shouldReconnect)
//             // reconnect if not logged out
//             if(shouldReconnect) {
//                 connectToWhatsApp()
//             }
//         } else if(connection === 'open') {
//             console.log('opened connection')
//         }

//         if(update.qr){
//             qrcode.generate(update.qr, {small: true});
//         }
//     })
//     sock.ev.on('messages.upsert', async m => {
//         for (let index = 0; index < m.messages.length; index++) {
//             const message = m.messages[index];
//             const content = message.message?.conversation || message.message?.extendedTextMessage?.text
            
//             if (content === "OlÃ¡") {
//                 // @ts-ignore
//                 await sock.sendMessage(message.key.remoteJid, {text: "Hello World"});
//             }
            
//         }

//     });

//     sock.ev.on("creds.update", saveCreds);

// }
// // run in main file
// connectToWhatsApp();